" use pathogen to keep vim scripts bundled
filetype off
call pathogen#infect()
call pathogen#helptags()
filetype plugin indent on

set nocompatible

" Security
set modelines=0

" Tabs/spaces
set tabstop=4
set shiftwidth=4
set softtabstop=4
set expandtab

" Basic options
set encoding=utf-8
set scrolloff=3
set autoindent
set showmode
set showcmd
set hidden
set wildmenu
set wildmode=list:longest
set visualbell
set cursorline
set ttyfast
set ruler
set backspace=indent,eol,start
set relativenumber
set colorcolumn=81
"set undofile

" Backups
set backupdir=~/.vim/tmp/backup// " backups
set directory=~/.vim/tmp/swap//   " swap files
set backup                        " enable backups

" Searching
nnoremap / /\v
vnoremap / /\v
set ignorecase
set smartcase
set incsearch
set showmatch
set hlsearch
set gdefault
map <leader><space> :noh<cr>
runtime macros/matchit.vim
nmap <tab> %
vmap <tab> %

" Status line
set laststatus=2
set statusline=%-.40f\                  " filename
set statusline+=%y\                     " syntax type
set statusline+=[%{&ff},%{&fenc},       " file settings
set statusline+=%{&et?'spaces':'tabs'}, " expand tabs?
set statusline+=%{&ts}]\                " tabstop width
set statusline+=%h%r%w%m                " flags
set statusline+=%=                      " right align
set statusline+=%{synIDattr(synID(line('.'),col('.'),1),'name')}\  " current syntax element
set statusline+=(%c,%l/%L)\             " cursor position
set statusline+=%P                      " percentage through file

" Color scheme (terminal)
syntax on
set background=dark
set t_Co=256
colorscheme molokai

" NERD Tree
map <F2> :NERDTreeToggle<cr>
let NERDTreeIgnore=['.vim$', '\~$', '.*\.pyc$', 'pip-log\.txt$']

" Use the damn hjkl keys
nnoremap <up> <nop>
nnoremap <down> <nop>
nnoremap <left> <nop>
nnoremap <right> <nop>

" Easy buffer navigation
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l
map <leader>w <C-w>v<C-w>l

" Nice pasting
set pastetoggle=<leader>p

" Guess the tab format of the current file
function! GuessExpandTab()
   let nspaces = len(filter(getline(0, "$"), 'match(v:val, " ") == 0'))
   let ntabs = len(filter(getline(0, "$"), 'match(v:val, "\t") == 0'))
   if ntabs > nspaces
       set noexpandtab
   endif
endfunction

" Guess tab format here, override after
au BufRead * call GuessExpandTab()

au BufRead,BufNewFile *.less set filetype=css
au BufRead,BufNewFile *.scss set filetype=scss

au BufNewFile,BufRead *.m*down set filetype=markdown
au BufNewFile,BufRead *.m*down nnoremap <leader>1 yypVr=
au BufNewFile,BufRead *.m*down nnoremap <leader>2 yypVr-
au BufNewFile,BufRead *.m*down nnoremap <leader>3 I### <ESC>

au BufNewFile,BufRead *.{s,}ml set tabstop=2
au BufNewFile,BufRead *.{s,}ml set shiftwidth=2
au BufNewFile,BufRead *.{s,}ml set softtabstop=2

au BufNewFile,BufRead *.go set noexpandtab

highlight ExtraWhitespace ctermbg=darkgrey guibg=darkgrey
function! SetExtraWhitespace()
       if &expandtab
               match ExtraWhitespace /^\t+\|\s\+$/
       else
               match ExtraWhitespace /^ +\|\s\+$/
       endif
endfunction
au BufWinEnter * call SetExtraWhitespace()
au BufWinLeave * call clearmatches()
au InsertEnter * call clearmatches()
au InsertLeave * call SetExtraWhitespace()

" TagList
nmap <leader>t :TlistToggle<cr>

" Ack
map <leader>a :Ack

" LatexSuite
let g:Tex_DefaultTargetFormat='pdf'
let g:Imap_UsePlaceHolders=0

" Gundo
nnoremap <leader>u :GundoToggle<cr>

" Faster Esc
inoremap jj <ESC>

" Edit .vimrc
nmap <leader>ev :e $MYVIMRC<cr>

" Sudo to write
cmap w!! w !sudo tee % >/dev/null

" Shouldn't need shift
nnoremap ; :
nnoremap , ;

" For colemak users
function! StartColemak()
    nnoremap n j
    vnoremap n j
    nnoremap e k
    vnoremap e k
    nnoremap k n
    vnoremap k n
    nnoremap j e
    vnoremap j e
    nnoremap <leader>k :call StopColemak()<cr>
endfunction

function! StopColemak()
    nnoremap n n
    vnoremap n n
    nnoremap e e
    vnoremap e e
    nnoremap k k
    vnoremap k k
    nnoremap j j
    vnoremap j j
    nnoremap <leader>k :call StartColemak()<cr>
endfunction

nnoremap <leader>k :call StartColemak()<cr>
