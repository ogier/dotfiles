set nocompatible

" Load plugins via Vundle
source ~/.vimrc.plugins

" Security
set modelines=0

" Tabs/spaces
set tabstop=4                     " width of a tab
set shiftwidth=4                  " width for autoindent
set softtabstop=4                 " number of spaces inserted by <Tab>
set expandtab                     " convert tabs to spaces as they are typed
set autoindent                    " keep indent from previous line

" Basic options
set encoding=utf-8                " sane default for the modern world
set scrolloff=8                   " keep 8+ lines above and below cursor
set showmode                      " show mode below status line
set showcmd                       " show commands as they are typed
set hidden                        " allow hidden buffers
set wildmenu                      " tab-complete on the commandline
set wildmode=list:longest         " list all completions, fill in common prefix
set visualbell                    " flash instead of beeping
set cursorline                    " highlight the line with the cursor on it
set ttyfast                       " redraw more, smoother in corner cases
set ruler                         " show cursor position (overridden by statusline)
set backspace=indent,eol,start    " backspace over linebreaks and indentation
if version >= 703
    set relativenumber                " number lines relative to the cursor
    set colorcolumn=81                " highlight after the 80th column
    "set undofile                      " save undo history for each file
endif

" Backups
set backupdir=~/.vim/tmp/backup// " backups
set directory=~/.vim/tmp/swap//   " swap files
set backup                        " enable backups

" Searching
set smartcase                     " case-insensitive if search is all lowercase
set incsearch                     " jump to search results as you type
set gdefault                      " match all results on each line by default
set showmatch                     " highlight matching braces/parens
set hlsearch                      " highlight all matches from search
                                  " <leader><space> clears this
map <leader><space> :noh<cr>

" Status line
set laststatus=2
set statusline=%-.40f\                  " filename
set statusline+=%y\                     " syntax type
set statusline+=[%{&ff},%{&fenc},       " file settings
set statusline+=%{&et?'spaces':'tabs'}, " expand tabs?
set statusline+=%{&ts}]\                " tabstop width
set statusline+=%h%r%w%m                " flags
set statusline+=%=                      " right align
set statusline+=%{synIDattr(synID(line('.'),col('.'),1),'name')}\  " current syntax element
set statusline+=(%c,%l/%L)\             " cursor position
set statusline+=%P                      " percentage through file

" Color scheme (terminal)
syntax on
set background=dark
set t_Co=256
colorscheme molokai

" For colemak users
nnoremap <leader>k :set langmap=nj,ek,kn,je<cr>
nnoremap <leader>n :set langmap=<cr>
set langmap=nj,ek,kn,je           " swap some keys to make navigation easier

" Paste without autoindent
set pastetoggle=<leader>p

" Don't require the shift key to get a colon
nnoremap ; :
nnoremap , ;

" NERD Tree
map <F2> :NERDTreeToggle<cr>
let NERDTreeIgnore=['.vim$', '\~$', '.*\.pyc$', 'pip-log\.txt$']

" TagList
nnoremap <leader>g :TlistToggle<cr>

" LatexSuite
let g:Tex_DefaultTargetFormat='pdf'
let g:Imap_UsePlaceHolders=0

" Gundo
nnoremap <leader>u :GundoToggle<cr>

" Edit .vimrc
nnoremap <leader>ev :e $MYVIMRC<cr>

" Write with sudo
cmap w!! w !sudo tee % >/dev/null

" Guess the tab format of the current file
function! GuessExpandTab()
    let nspaces = len(filter(getline(0, "$"), 'match(v:val, " ") == 0'))
    let ntabs = len(filter(getline(0, "$"), 'match(v:val, "\t") == 0'))
    if ntabs > nspaces
        set noexpandtab
    endif
endfunction

" Guess tab format here, override after
au BufRead * call GuessExpandTab()

au BufRead,BufNewFile *.less set filetype=css
au BufRead,BufNewFile *.scss set filetype=scss

au BufNewFile,BufRead *.m{ark,}d{own,} set filetype=markdown
au BufNewFile,BufRead *.m{ark,}d{own,} nnoremap <leader>1 yypVr=
au BufNewFile,BufRead *.m{ark,}d{own,} nnoremap <leader>2 yypVr-
au BufNewFile,BufRead *.m{ark,}d{own,} nnoremap <leader>3 I### <ESC>

au BufNewFile,BufRead *.{s,}ml set tabstop=2
au BufNewFile,BufRead *.{s,}ml set shiftwidth=2
au BufNewFile,BufRead *.{s,}ml set softtabstop=2

au BufNewFile,BufRead *.go set noexpandtab

" Highlight trailing whitespace
highlight ExtraWhitespace ctermbg=darkgrey guibg=darkgrey
function! SetExtraWhitespace()
    if &expandtab
        match ExtraWhitespace /^\t+\|\s\+$/
    else
        match ExtraWhitespace /^ +\|\s\+$/
    endif
endfunction
au BufWinEnter * call SetExtraWhitespace()
au BufWinLeave * call clearmatches()
au InsertEnter * call clearmatches()
au InsertLeave * call SetExtraWhitespace()
